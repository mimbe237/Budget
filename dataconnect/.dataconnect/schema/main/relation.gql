extend type Account {
  """
  ✨ List `Transaction` objects in a one-to-many relationship (where `Transaction`.`account` is this object).
  """
  transactions_on_account(
    """
    Filter condition to narrow down the query results.
    """
    where: Transaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Transaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Transaction_Having
  ): [Transaction!]! @fdc_generated(from: "Transaction.account", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Account", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Account` table.
  """
  _count: Int! @fdc_generated(from: "Account.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Account` table where the `accountType` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  accountType_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Account.accountType", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Account` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Account.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Account` table where the `currency` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  currency_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Account.currency", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Account` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Account.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Account` table where the `initialBalance` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  initialBalance_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Account.initialBalance", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Account` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Account.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Account` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Account.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `initialBalance` field in the `Account` table.
  """
  initialBalance_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Account.initialBalance", purpose: QUERY_SUM)
  """
  ✨ Average the `initialBalance` field in the `Account` table.
  """
  initialBalance_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Account.initialBalance", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `Account` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Account.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `initialBalance` field in the `Account` table.
  """
  initialBalance_min: Float @fdc_generated(from: "Account.initialBalance", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Account` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Account.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `initialBalance` field in the `Account` table.
  """
  initialBalance_max: Float @fdc_generated(from: "Account.initialBalance", purpose: QUERY_MAX)
}
extend type Budget {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Budget", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Budget` table.
  """
  _count: Int! @fdc_generated(from: "Budget.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Budget` table where the `categoryId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  categoryId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Budget.categoryId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Budget` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Budget.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Budget` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Budget.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Budget` table where the `endDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  endDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Budget.endDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Budget` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Budget.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Budget` table where the `limitAmount` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  limitAmount_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Budget.limitAmount", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Budget` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Budget.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Budget` table where the `startDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  startDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Budget.startDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Budget` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Budget.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `limitAmount` field in the `Budget` table.
  """
  limitAmount_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Budget.limitAmount", purpose: QUERY_SUM)
  """
  ✨ Average the `limitAmount` field in the `Budget` table.
  """
  limitAmount_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Budget.limitAmount", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `Budget` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Budget.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `endDate` field in the `Budget` table.
  """
  endDate_min: Date @fdc_generated(from: "Budget.endDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `limitAmount` field in the `Budget` table.
  """
  limitAmount_min: Float @fdc_generated(from: "Budget.limitAmount", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `startDate` field in the `Budget` table.
  """
  startDate_min: Date @fdc_generated(from: "Budget.startDate", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Budget` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Budget.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `endDate` field in the `Budget` table.
  """
  endDate_max: Date @fdc_generated(from: "Budget.endDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `limitAmount` field in the `Budget` table.
  """
  limitAmount_max: Float @fdc_generated(from: "Budget.limitAmount", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `startDate` field in the `Budget` table.
  """
  startDate_max: Date @fdc_generated(from: "Budget.startDate", purpose: QUERY_MAX)
}
extend type Category {
  """
  ✨ List `Budget` objects in a one-to-many relationship (where `Budget`.`category` is this object).
  """
  budgets_on_category(
    """
    Filter condition to narrow down the query results.
    """
    where: Budget_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Budget_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Budget_Having
  ): [Budget!]! @fdc_generated(from: "Budget.category", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Transaction` objects in a one-to-many relationship (where `Transaction`.`category` is this object).
  """
  transactions_on_category(
    """
    Filter condition to narrow down the query results.
    """
    where: Transaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Transaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Transaction_Having
  ): [Transaction!]! @fdc_generated(from: "Transaction.category", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Category", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Category` table.
  """
  _count: Int! @fdc_generated(from: "Category.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Category` table where the `categoryType` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  categoryType_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Category.categoryType", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Category` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Category.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Category` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Category.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Category` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Category.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Category` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Category.userId", purpose: QUERY_COUNT)
}
extend type Transaction {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Transaction", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Transaction` table.
  """
  _count: Int! @fdc_generated(from: "Transaction.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Transaction` table where the `accountId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  accountId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Transaction.accountId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Transaction` table where the `amount` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  amount_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Transaction.amount", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Transaction` table where the `categoryId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  categoryId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Transaction.categoryId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Transaction` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Transaction.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Transaction` table where the `date` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  date_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Transaction.date", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Transaction` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Transaction.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Transaction` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Transaction.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Transaction` table where the `merchant` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  merchant_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Transaction.merchant", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Transaction` table where the `transactionType` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  transactionType_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Transaction.transactionType", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Transaction` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Transaction.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `amount` field in the `Transaction` table.
  """
  amount_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Transaction.amount", purpose: QUERY_SUM)
  """
  ✨ Average the `amount` field in the `Transaction` table.
  """
  amount_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Transaction.amount", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `amount` field in the `Transaction` table.
  """
  amount_min: Float @fdc_generated(from: "Transaction.amount", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `createdAt` field in the `Transaction` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Transaction.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `date` field in the `Transaction` table.
  """
  date_min: Date @fdc_generated(from: "Transaction.date", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `amount` field in the `Transaction` table.
  """
  amount_max: Float @fdc_generated(from: "Transaction.amount", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `createdAt` field in the `Transaction` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Transaction.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `date` field in the `Transaction` table.
  """
  date_max: Date @fdc_generated(from: "Transaction.date", purpose: QUERY_MAX)
}
extend type User {
  """
  ✨ List `Account` objects in a one-to-many relationship (where `Account`.`user` is this object).
  """
  accounts_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Account_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Account_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Account_Having
  ): [Account!]! @fdc_generated(from: "Account.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Budget` objects in a one-to-many relationship (where `Budget`.`user` is this object).
  """
  budgets_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Budget_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Budget_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Budget_Having
  ): [Budget!]! @fdc_generated(from: "Budget.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Category` objects in a one-to-many relationship (where `Category`.`user` is this object).
  """
  categories_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Category_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Category_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Category_Having
  ): [Category!]! @fdc_generated(from: "Category.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Transaction` objects in a one-to-many relationship (where `Transaction`.`user` is this object).
  """
  transactions_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Transaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Transaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Transaction_Having
  ): [Transaction!]! @fdc_generated(from: "Transaction.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "User", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `User` table.
  """
  _count: Int! @fdc_generated(from: "User.", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `email` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  email_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.email", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `firstName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  firstName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.firstName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `hashedPassword` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  hashedPassword_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.hashedPassword", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `lastName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  lastName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.lastName", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `User` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `User` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MAX)
}
