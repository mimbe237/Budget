extend type Query {
  """
  ✨ Look up a single `Account` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  account(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Account_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Account_FirstRow
  ): Account @fdc_generated(from: "Account", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Budget` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  budget(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Budget_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Budget_FirstRow
  ): Budget @fdc_generated(from: "Budget", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Category` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  category(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Category_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Category_FirstRow
  ): Category @fdc_generated(from: "Category", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Transaction` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  transaction(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Transaction_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Transaction_FirstRow
  ): Transaction @fdc_generated(from: "Transaction", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ List `Account` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  accounts(
    """
    Filter condition to narrow down the query results.
    """
    where: Account_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Account_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Account_Having
  ): [Account!]! @fdc_generated(from: "Account", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Budget` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  budgets(
    """
    Filter condition to narrow down the query results.
    """
    where: Budget_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Budget_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Budget_Having
  ): [Budget!]! @fdc_generated(from: "Budget", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Category` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  categories(
    """
    Filter condition to narrow down the query results.
    """
    where: Category_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Category_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Category_Having
  ): [Category!]! @fdc_generated(from: "Category", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Transaction` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  transactions(
    """
    Filter condition to narrow down the query results.
    """
    where: Transaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Transaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Transaction_Having
  ): [Transaction!]! @fdc_generated(from: "Transaction", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
}
