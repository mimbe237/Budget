// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Provides personalized spending insights and recommendations.
 *
 * - getSpendingInsights - A function that analyzes spending habits and provides recommendations.
 * - SpendingInsightsInput - The input type for the getSpendingInsights function.
 * - SpendingInsightsOutput - The return type for the getSpendingInsights function.
 */

import { ai } from '@/ai/genkit';
const aiEnabled = false;
import {z} from 'genkit';

const SpendingInsightsInputSchema = z.object({
  spendingHistory: z
    .string()
    .describe(
      'A detailed record of the user\'s spending history, including categories and amounts.'
    ),
  budgetGoals: z
    .string()
    .describe(
      'The user\'s stated budget goals for different spending categories.'
    ),
});
export type SpendingInsightsInput = z.infer<typeof SpendingInsightsInputSchema>;

const SpendingInsightsOutputSchema = z.object({
  insights: z
    .string()
    .describe('Personalized insights into the user\'s spending habits.'),
  recommendations: z
    .string()
    .describe(
      'Specific recommendations for improving budgeting and reducing overspending.'
    ),
});
export type SpendingInsightsOutput = z.infer<typeof SpendingInsightsOutputSchema>;

export async function getSpendingInsights(
  input: SpendingInsightsInput
): Promise<SpendingInsightsOutput> {
  if (!aiEnabled) {
    return {
      insights:
        'L\'analyse IA est désactivée en environnement local. Ajoutez GEMINI_API_KEY ou GOOGLE_API_KEY pour activer cette fonctionnalité.',
      recommendations:
        'Continuez à enregistrer vos transactions et configurez vos budgets pour obtenir des recommandations personnalisées.',
    };
  }
  try {
    return await spendingInsightsFlow(input);
  } catch (error) {
    if (process.env.NODE_ENV !== 'production') {
      console.warn('[AI] Failed to fetch spending insights. Falling back to default copy.', error);
    }
    return {
      insights:
        'Impossible de générer des insights pour le moment. Nous affichons une synthèse générique afin de ne pas bloquer votre tableau de bord.',
      recommendations:
        'Vérifiez votre connexion internet et la clé d’API Gemini, puis réessayez plus tard pour obtenir des recommandations personnalisées.',
    };
  }
}

const prompt = aiEnabled && ai
  ? ai.definePrompt({
      name: 'spendingInsightsPrompt',
      input: {schema: SpendingInsightsInputSchema},
      output: {schema: SpendingInsightsOutputSchema},
      prompt: `You are a professional personal finance advisor specializing in budget analysis and spending optimization. Analyze the user's complete financial data to provide personalized, actionable insights and recommendations.

**FINANCIAL DATA:**
{{{spendingHistory}}}

**BUDGET GOALS:**
{{{budgetGoals}}}

**INSTRUCTIONS:**
1. **Insights Section**: Analyze the user's spending patterns, identify trends, highlight achievements, and point out potential issues (overspending, budget adherence, savings rate, etc.). Be specific with numbers and percentages. Keep it concise (3-5 key points).

2. **Recommendations Section**: Provide 3-5 specific, actionable recommendations to help the user:
   - Reduce overspending in specific categories
   - Optimize their budget allocation
   - Increase savings rate
   - Achieve their financial goals faster
   - Avoid common financial pitfalls

**TONE:** Professional yet friendly, encouraging, data-driven, and actionable.

**FORMAT:** 
- Use clear paragraphs for insights
- Use numbered or bulleted lists for recommendations
- Include specific amounts and percentages when relevant
- If the data is in French, respond in French; if in English, respond in English

Provide clear and actionable insights and recommendations to help the user improve their budgeting and financial health.`,
    })
  : null;

const spendingInsightsFlow = aiEnabled && ai
  ? ai.defineFlow(
      {
        name: 'spendingInsightsFlow',
        inputSchema: SpendingInsightsInputSchema,
        outputSchema: SpendingInsightsOutputSchema,
      },
      async input => {
        if (!prompt) {
          throw new Error('AI prompt unavailable.');
        }
        const {output} = await prompt(input);
        if (!output) {
          throw new Error('Empty response received from AI prompt');
        }
        return output;
      }
    )
  : null;
