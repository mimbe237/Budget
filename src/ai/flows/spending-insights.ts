// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Provides personalized spending insights and recommendations.
 *
 * - getSpendingInsights - A function that analyzes spending habits and provides recommendations.
 * - SpendingInsightsInput - The input type for the getSpendingInsights function.
 * - SpendingInsightsOutput - The return type for the getSpendingInsights function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SpendingInsightsInputSchema = z.object({
  spendingHistory: z
    .string()
    .describe(
      'A detailed record of the user\'s spending history, including categories and amounts.'
    ),
  budgetGoals: z
    .string()
    .describe(
      'The user\'s stated budget goals for different spending categories.'
    ),
});
export type SpendingInsightsInput = z.infer<typeof SpendingInsightsInputSchema>;

const SpendingInsightsOutputSchema = z.object({
  insights: z
    .string()
    .describe('Personalized insights into the user\'s spending habits.'),
  recommendations: z
    .string()
    .describe(
      'Specific recommendations for improving budgeting and reducing overspending.'
    ),
});
export type SpendingInsightsOutput = z.infer<typeof SpendingInsightsOutputSchema>;

export async function getSpendingInsights(
  input: SpendingInsightsInput
): Promise<SpendingInsightsOutput> {
  return spendingInsightsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'spendingInsightsPrompt',
  input: {schema: SpendingInsightsInputSchema},
  output: {schema: SpendingInsightsOutputSchema},
  prompt: `You are a personal finance advisor. Analyze the user's spending history and budget goals to provide personalized insights and recommendations.

Spending History: {{{spendingHistory}}}
Budget Goals: {{{budgetGoals}}}

Provide clear and actionable insights and recommendations to help the user improve their budgeting and reduce overspending.`,
});

const spendingInsightsFlow = ai.defineFlow(
  {
    name: 'spendingInsightsFlow',
    inputSchema: SpendingInsightsInputSchema,
    outputSchema: SpendingInsightsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
